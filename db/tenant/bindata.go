// Code generated by go-bindata.
// sources:
// db/tenant/1_base.sql
// db/tenant/2_auth.sql
// db/tenant/3_tenant_user_api.sql
// DO NOT EDIT!

package tenant

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbTenant1_baseSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x93\x41\x4f\x83\x40\x10\x85\xef\xfb\x2b\xe6\x08\xb1\x4d\xd4\xa4\x27\xe2\x61\x0b\xd3\xba\x11\x96\x66\x59\x4c\x7b\x22\xab\xbb\x2a\xb1\x50\x02\x34\xfa\xf3\x0d\xa6\x2d\xd0\xd2\xd6\x44\x4e\xc0\x7c\x33\x99\xf7\xde\xee\x78\x0c\x37\x59\xfa\x5e\xaa\xda\x40\x5c\x10\x57\x20\x95\x08\x92\x4e\x7d\x04\x55\xa8\xb2\xce\x4c\x5e\x57\xc4\x22\x00\xa9\x86\xfd\xc3\xb8\xb4\xee\x6e\x6d\x88\x79\xc4\xe6\x1c\x3d\xa0\xb1\x0c\x13\xc6\x5d\x81\x01\x72\x09\x0b\xc1\x02\x2a\x56\xf0\x84\xab\x11\x01\x78\x2d\x8d\xaa\x8d\x4e\x54\x0d\x92\x05\x18\x49\x1a\x2c\x9a\x31\x3c\x94\xc0\x63\xdf\x6f\x98\x6d\xa1\xaf\x32\xda\xac\xcd\x20\xb3\xab\x2b\xad\x4b\x53\x55\xcd\xaf\x67\x2a\xdc\x47\x2a\xac\xfb\xc9\xc4\xfe\xad\x13\x9b\x00\x20\x9f\x33\x8e\xf0\x00\x2c\xcf\x37\xde\xd4\x21\x84\xfa\x12\xc5\xa9\x5e\x00\xea\x79\xc0\xb8\x87\x4b\x48\xf5\x77\xd2\x96\x92\xce\x12\x56\xfb\x6e\x3b\xa4\x6f\x5e\x69\xaa\x54\x0f\x79\xf7\x2f\xfb\x00\xfa\xca\x2f\xb8\x78\x0d\xed\xe8\x18\x44\x77\x58\xae\x32\xd3\x6e\xde\xb3\xb5\x8b\x15\x1f\x9b\xdc\x24\xf9\x36\x7b\x31\xe5\x05\xcc\x64\x2a\x5d\x27\xfb\x9c\xce\x62\x07\xbb\x93\xc6\xb8\x13\xbb\xfe\x98\x67\x1b\xc1\x71\x9c\x87\xca\xb9\x34\x47\x17\x5a\x7a\xcb\x59\xdd\xaf\x43\x9b\x1b\xf2\x48\x0a\xca\xb8\x84\xb7\xcf\x73\xad\xb3\x50\x20\x9b\xf3\x26\xe5\xa3\x31\x20\x70\x86\x02\xb9\x8b\x51\xe7\x50\x82\x95\xea\xe6\x98\x75\xaf\xac\xb7\xf9\xca\x89\x27\xc2\xc5\x4e\x32\x9b\x01\x2e\x59\x24\xa3\x56\xbc\x33\x5c\x6f\xe7\x3a\x3f\x01\x00\x00\xff\xff\x81\x53\xc0\x54\x04\x04\x00\x00")

func dbTenant1_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbTenant1_baseSql,
		"db/tenant/1_base.sql",
	)
}

func dbTenant1_baseSql() (*asset, error) {
	bytes, err := dbTenant1_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/tenant/1_base.sql", size: 1028, mode: os.FileMode(436), modTime: time.Unix(1501018906, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbTenant2_authSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x94\x4f\x6f\x9b\x30\x18\xc6\xef\xfe\x14\xef\x11\x6b\xad\x94\x4a\xd5\x2e\xd5\x0e\x2e\xbc\xcd\xac\x05\x93\x19\x33\x29\x27\xe4\x0d\x2f\x42\x0b\x7f\x64\x88\xfa\xf5\x27\x3b\x19\xc3\x2a\x5d\xd9\xa1\xb9\x04\x99\x9f\x7f\xbc\x3c\x0f\x70\x7b\x0b\x1f\x9a\xfa\x68\xf5\x68\xa0\xe8\x49\x2c\x91\x29\x04\xc5\x1e\x77\x08\xe7\xc1\xd8\x81\x44\x04\xa0\xae\xe0\xef\x8f\x0b\x15\xdd\x6d\x28\x14\x22\xe7\x5b\x81\x09\xb0\x42\x65\x25\x17\xb1\xc4\x14\x85\x82\xbd\xe4\x29\x93\x07\xf8\x82\x87\x1b\x02\xf0\xc3\x1a\x3d\x9a\xaa\xd4\x23\x00\x28\x9e\x62\xae\x58\xba\x07\x00\x91\x29\x10\xc5\x6e\xe7\xa0\x73\x5f\xbd\x0d\x55\xe6\x64\x96\xa1\x3f\x96\xc1\xd8\x56\x37\xc6\x8f\xf9\x8d\xc9\xf8\x33\x93\xd1\xc7\x7b\x3a\x59\xa0\x10\xfc\x6b\x81\x8e\xed\xf5\x30\x3c\x77\xb6\x0a\xd9\x0d\x0d\xae\x78\x3c\x75\xdf\xf5\xa9\xd4\x55\x53\xb7\xa0\xb8\x38\xf8\x7b\xa7\xe1\x58\xd6\x0c\x75\x65\xda\x71\x70\x26\xaf\xb9\xa7\xde\x3a\x87\x74\xaf\xed\xd8\x5c\xa9\x25\x88\x50\x02\x80\x62\xcb\x05\xc2\x27\xe0\x6d\xdb\x25\x8f\x0f\x24\x2c\xe4\x68\xbb\x73\xff\x8e\x8d\xac\xab\x64\x5d\x27\x13\x31\x15\x32\x0f\xfa\x6e\xb3\x59\x6c\xe5\xd5\xc0\xd7\x25\xbe\x2e\xf2\xff\xca\xdc\xbf\x04\xe5\x2c\x79\xb7\x50\xba\xf8\x5f\xa4\x1e\x3c\x39\x6e\x83\xc3\xfe\x49\xcd\x8a\x81\xe8\x2a\xbe\x99\xf6\x52\x87\xc4\x99\xc8\x95\x64\x5c\x28\xf8\xf9\xab\xf4\xcc\x65\x18\x7f\x0c\x4f\x99\x44\xbe\x15\x81\x81\x82\xc4\x27\x94\x28\x62\xcc\x2f\xf3\x43\xf4\xa6\xcd\xff\x85\xba\x69\x8e\xb9\xef\x82\x7b\xe1\x2b\xf1\xcd\x3f\x29\x49\xf7\xdc\x92\x44\x66\xfb\x85\x34\x1f\x5e\x9c\x08\x56\xae\xd0\xef\x00\x00\x00\xff\xff\x7e\x4d\x16\xac\xa1\x04\x00\x00")

func dbTenant2_authSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbTenant2_authSql,
		"db/tenant/2_auth.sql",
	)
}

func dbTenant2_authSql() (*asset, error) {
	bytes, err := dbTenant2_authSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/tenant/2_auth.sql", size: 1185, mode: os.FileMode(436), modTime: time.Unix(1501080616, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dbTenant3_tenant_user_apiSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x91\x31\xcb\x83\x30\x18\x84\xf7\xfc\x8a\xdb\xfc\x3e\x5a\xb7\x6e\x9d\x52\x93\xd6\x21\x8d\x45\x92\x39\x08\x0d\xe2\xa0\x86\x44\xe9\xdf\x2f\x08\x45\xab\x85\xda\xa9\x74\x7c\xe1\x1e\xb8\xe7\xbd\x38\xc6\xa6\xae\x4a\x5f\x74\x16\xda\x11\x2a\x14\xcf\xa1\xe8\x41\x70\xd2\x07\xeb\x03\x01\x92\x94\xca\x13\x47\x92\x09\x7d\x96\xf0\x36\x54\x57\xdb\x74\x01\xce\xfa\xda\x8c\x67\x92\xd2\xfc\x6f\xf7\x0f\x99\x29\x48\x2d\xc4\x76\x81\x16\xae\xf0\x5d\x3d\xb2\x93\xfb\x15\x4c\x19\x7b\x90\x43\x7c\xe8\xb3\x48\x82\xf1\x23\xd5\x42\x21\x32\xc6\x98\x68\x4f\x9e\x1c\x4a\xdf\xf6\xee\x17\x25\xa6\xbb\xb0\xf6\xd6\xac\x58\x66\xa6\xf2\x89\xd4\xdc\xe4\x8d\x14\xcb\xb3\xcb\xd2\x6a\xdd\xeb\xbf\xdf\xf2\x1e\x00\x00\xff\xff\x99\x0a\x1a\xba\xf3\x02\x00\x00")

func dbTenant3_tenant_user_apiSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbTenant3_tenant_user_apiSql,
		"db/tenant/3_tenant_user_api.sql",
	)
}

func dbTenant3_tenant_user_apiSql() (*asset, error) {
	bytes, err := dbTenant3_tenant_user_apiSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/tenant/3_tenant_user_api.sql", size: 755, mode: os.FileMode(436), modTime: time.Unix(1501142783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/tenant/1_base.sql":            dbTenant1_baseSql,
	"db/tenant/2_auth.sql":            dbTenant2_authSql,
	"db/tenant/3_tenant_user_api.sql": dbTenant3_tenant_user_apiSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"tenant": &bintree{nil, map[string]*bintree{
			"1_base.sql":            &bintree{dbTenant1_baseSql, map[string]*bintree{}},
			"2_auth.sql":            &bintree{dbTenant2_authSql, map[string]*bintree{}},
			"3_tenant_user_api.sql": &bintree{dbTenant3_tenant_user_apiSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

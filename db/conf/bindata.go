// Code generated by go-bindata.
// sources:
// db/conf/1_base.sql
// DO NOT EDIT!

package conf

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dbConf1_baseSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7a\x8a\x3d\xda\xfc\x7f\xc0\x29\xe4\x94\x93\x6a\x2d\xad\xa8\x2c\x1b\x45\x2a\xcd\x49\x08\x4b\x14\x43\x2c\x07\x47\xa6\x79\xfc\x62\x70\x68\x1c\x4a\x75\x12\x33\x1f\xb3\xbb\xb3\xd9\xc0\xbf\xbe\xfb\x1c\x5d\x0a\x60\xce\xa4\x54\x48\x35\x82\xa6\xcf\x02\x21\x85\xe8\x62\xba\x90\x8c\x00\x74\x1e\x6e\x8f\x4b\x9d\x6d\x8b\x1c\x8c\x3c\xf0\x17\x89\x0c\xa8\xd1\xb5\xe5\xb2\x54\x58\xa1\xd4\xd0\x28\x5e\x51\x75\x84\x37\x3c\xfe\x27\x00\xed\x18\x5c\x0a\xde\xba\x04\x9a\x57\x78\xd0\xb4\x6a\xe6\x18\x59\x6b\x90\x46\x88\x99\x99\xce\xfe\x77\x66\xf1\x7d\x38\x85\xbf\xfc\x76\x88\x29\x5c\xd3\x2c\xbd\x53\x55\xbe\x52\x95\x6d\x8b\x22\x5f\xcd\x88\xae\x0f\xcb\x05\x37\xe6\x69\xb7\x5b\x33\xed\x74\x49\x43\x6f\xa7\xf1\xf4\xc0\x18\x21\x48\xbe\x27\x84\x0a\x8d\xea\xa1\x1e\x00\xca\x18\x70\xc9\xf0\x03\x3a\x7f\xb5\x8b\x6e\xef\x96\xce\x7e\xfe\x73\xca\x7d\xe9\x6c\xf8\x8a\x84\xa9\xba\x59\xa7\xee\xbf\x03\x00\x00\xff\xff\xd9\xb8\x2b\x4d\x99\x01\x00\x00")

func dbConf1_baseSqlBytes() ([]byte, error) {
	return bindataRead(
		_dbConf1_baseSql,
		"db/conf/1_base.sql",
	)
}

func dbConf1_baseSql() (*asset, error) {
	bytes, err := dbConf1_baseSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "db/conf/1_base.sql", size: 409, mode: os.FileMode(436), modTime: time.Unix(1500582196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"db/conf/1_base.sql": dbConf1_baseSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"db": &bintree{nil, map[string]*bintree{
		"conf": &bintree{nil, map[string]*bintree{
			"1_base.sql": &bintree{dbConf1_baseSql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
